name: Deploy to Production

on:
  push:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: 'false'

env:
  NODE_VERSION: '18'
  PRODUCTION_HOST: ${{ secrets.PRODUCTION_HOST }}
  PRODUCTION_USER: ${{ secrets.PRODUCTION_USER }}
  PRODUCTION_KEY: ${{ secrets.PRODUCTION_PRIVATE_KEY }}
  PRODUCTION_PATH: ${{ secrets.PRODUCTION_PATH }}

jobs:
  # Build and Test Job
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        node-version: [18]
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: |
            frontend/package-lock.json
            backend/package-lock.json

      # Frontend Build and Test
      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: npm ci --prefer-offline --no-audit

      - name: Lint Frontend Code
        working-directory: ./frontend
        run: npm run lint || true

      - name: Type Check Frontend
        working-directory: ./frontend
        run: npm run type-check || npx tsc --noEmit || true

      - name: Build Frontend
        working-directory: ./frontend
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1
        run: npm run build

      # Backend Build and Test
      - name: Install Backend Dependencies
        working-directory: ./backend
        run: npm ci --prefer-offline --no-audit

      - name: Lint Backend Code
        working-directory: ./backend
        run: npm run lint || true

      - name: Type Check Backend
        working-directory: ./backend
        run: npm run build || true

      # Create deployment artifact
      - name: Create Deployment Archive
        run: |
          # Create a deployment archive excluding unnecessary files
          tar --exclude='node_modules' \
              --exclude='.git' \
              --exclude='.github' \
              --exclude='*.log' \
              --exclude='.env.local' \
              --exclude='.env.development' \
              --exclude='coverage' \
              --exclude='.next/cache' \
              -czf deployment.tar.gz .

      - name: Upload Deployment Artifact
        uses: actions/upload-artifact@v3
        with:
          name: deployment-package
          path: deployment.tar.gz
          retention-days: 1

  # Deploy Job
  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Download Deployment Artifact
        uses: actions/download-artifact@v3
        with:
          name: deployment-package

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PRODUCTION_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to Production Server
        run: |
          # Upload and extract the deployment package
          scp -i ~/.ssh/id_rsa deployment.tar.gz ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:${{ secrets.PRODUCTION_PATH }}/
          
          # Execute deployment commands on the server
          ssh -i ~/.ssh/id_rsa ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            set -e
            cd ${{ secrets.PRODUCTION_PATH }}
            
            echo "üöÄ Starting deployment..."
            
            # Backup current deployment
            if [ -d "current" ]; then
              echo "üì¶ Creating backup..."
              mv current backup-$(date +%Y%m%d_%H%M%S) || true
            fi
            
            # Extract new deployment
            echo "üìÅ Extracting new deployment..."
            mkdir -p current
            tar -xzf deployment.tar.gz -C current/
            
            # Install dependencies and build
            echo "üì¶ Installing dependencies..."
            cd current
            
            # Backend setup
            cd backend
            npm ci --production --prefer-offline --no-audit
            echo "üîß Backend dependencies installed"
            
            # Frontend setup
            cd ../frontend
            npm ci --production --prefer-offline --no-audit
            
            # Build frontend if not already built
            if [ ! -d ".next" ]; then
              echo "üèóÔ∏è Building frontend..."
              NODE_ENV=production NEXT_TELEMETRY_DISABLED=1 npm run build
            fi
            echo "üîß Frontend built successfully"
            
            cd ..
            
            # Database migration (if needed)
            echo "üóÑÔ∏è Running database migrations..."
            cd backend
            npx prisma migrate deploy || echo "‚ö†Ô∏è Migration failed or not needed"
            cd ..
            
            # Copy environment files
            echo "‚öôÔ∏è Setting up environment..."
            if [ -f "../.env.production" ]; then
              cp ../.env.production backend/.env
              cp ../.env.production frontend/.env.local
            fi
            
            # Restart services using PM2
            echo "üîÑ Restarting services..."
            
            # Stop existing processes
            pm2 stop formatic-backend || true
            pm2 stop formatic-frontend || true
            pm2 delete formatic-backend || true
            pm2 delete formatic-frontend || true
            
            # Start backend
            cd backend
            pm2 start npm --name "formatic-backend" -- start
            
            # Start frontend
            cd ../frontend
            pm2 start npm --name "formatic-frontend" -- start
            
            # Save PM2 configuration
            pm2 save
            
            echo "‚úÖ Deployment completed successfully!"
            
            # Cleanup old backups (keep last 3)
            cd ${{ secrets.PRODUCTION_PATH }}
            ls -t backup-* 2>/dev/null | tail -n +4 | xargs rm -rf 2>/dev/null || true
            
            # Remove deployment archive
            rm -f deployment.tar.gz
            
            echo "üßπ Cleanup completed"
            
            # Health check
            echo "üè• Performing health check..."
            sleep 10
            
            # Check if services are running
            pm2 list | grep -E "(formatic-backend|formatic-frontend)" | grep -q "online" && echo "‚úÖ Services are running" || echo "‚ùå Some services may not be running"
            
          EOF

      - name: Verify SSL Certificate (if applicable)
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            # Check if SSL certificate exists and is valid
            if [ -f "/etc/letsencrypt/live/${{ secrets.DOMAIN_NAME }}/fullchain.pem" ]; then
              echo "üîí SSL certificate exists"
              # Check certificate expiry
              openssl x509 -in /etc/letsencrypt/live/${{ secrets.DOMAIN_NAME }}/fullchain.pem -noout -dates
            else
              echo "‚ö†Ô∏è SSL certificate not found - manual setup may be required"
            fi
          EOF

      - name: Post-deployment Health Check
        run: |
          echo "üè• Running post-deployment health check..."
          
          # Wait a bit for services to fully start
          sleep 15
          
          # Check if the application is responding
          if curl -f -s --max-time 30 https://${{ secrets.DOMAIN_NAME }}/api/health > /dev/null 2>&1; then
            echo "‚úÖ Backend health check passed"
          else
            echo "‚ö†Ô∏è Backend health check failed - manual verification recommended"
          fi
          
          if curl -f -s --max-time 30 https://${{ secrets.DOMAIN_NAME }}/ > /dev/null 2>&1; then
            echo "‚úÖ Frontend health check passed"
          else
            echo "‚ö†Ô∏è Frontend health check failed - manual verification recommended"
          fi

      - name: Cleanup SSH
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa

  # Notification Job
  notify:
    needs: [build-and-test, deploy]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Notify Deployment Status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "‚úÖ Deployment completed successfully!"
            echo "üåê Application should be available at: https://${{ secrets.DOMAIN_NAME }}"
          elif [ "${{ needs.deploy.result }}" == "failure" ]; then
            echo "‚ùå Deployment failed!"
            echo "üîç Check the logs above for details"
            exit 1
          elif [ "${{ needs.deploy.result }}" == "cancelled" ]; then
            echo "‚èπÔ∏è Deployment was cancelled"
          else
            echo "‚ö†Ô∏è Deployment status unknown: ${{ needs.deploy.result }}"
          fi

# Security and best practices
concurrency:
  group: deploy-production
  cancel-in-progress: false
