name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18' # Ensure this matches your EC2 environment
        cache: 'npm' # Cache npm dependencies

    - name: Build Backend
      working-directory: ./backend
      run: |
        npm ci
        npm run build
        npx prisma generate # Generate Prisma client
        # Remove dev dependencies node_modules before packaging
        rm -rf node_modules
        npm ci --omit=dev # Install only production dependencies
        # Create a tarball of the backend build and production node_modules
        # CRITICAL: Excluded .env from this tarball. It MUST be managed on the server.
        tar -czf backend-build.tar.gz dist prisma node_modules package.json package-lock.json

    - name: Build Frontend
      working-directory: ./frontend
      run: |
        npm ci
        npm run build
        # Remove dev dependencies node_modules before packaging
        rm -rf node_modules
        npm ci --omit=dev # Install only production dependencies
        # Create a tarball of the frontend build and production node_modules
        # The .next directory contains the built static assets in .next/static
        # The public directory is at the root of the frontend workspace (if it exists)
        tar -czf frontend-build.tar.gz .next node_modules package.json package-lock.json next.config.js # Add other necessary files

    - name: Copy Backend Build to EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ec2-user # Updated username
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "backend/backend-build.tar.gz"
        target: "/home/ec2-user/formatic-unified/backend/" # Adjust path as needed

    - name: Copy Frontend Build to EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ec2-user # Updated username
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "frontend/frontend-build.tar.gz"
        target: "/home/ec2-user/formatic-unified/frontend/" # Adjust path as needed
        
    - name: Execute Deployment Commands on EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ec2-user # Updated username
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          set -e # Exit immediately if a command exits with a non-zero status.
          APP_DIR="/home/ec2-user/formatic-unified"
          BACKEND_DIR="$APP_DIR/backend"
          FRONTEND_DIR="$APP_DIR/frontend"
          NVM_DIR="/home/ec2-user/.nvm"

          echo "Executing deployment on server as $(whoami)..."
          cd $APP_DIR
          echo "Current directory: $(pwd)"

          echo "Sourcing NVM for PM2 and Node commands..."
          export NVM_DIR="$NVM_DIR"
          [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
          [ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

          echo "Node version: $(node -v)"
          echo "NPM version: $(npm -v)"
          echo "PM2 version: $(pm2 -V)"

          echo "Pulling latest changes from main branch (final check)..."
          git checkout main
          git fetch origin main # Fetch latest changes
          git reset --hard origin/main # Force update to latest, discarding local changes
          git pull origin main # Should be a fast-forward or no-op now

          echo "Deploying Backend..."
          cd $BACKEND_DIR
          echo "Current backend directory: $(pwd)"
          ls -la # List files to ensure tarball is present
          echo "Extracting backend build..."
          if [ -f backend-build.tar.gz ]; then
            tar -xzf backend-build.tar.gz
            rm backend-build.tar.gz # Clean up tarball
            echo "Backend build extracted."
          else
            echo "ERROR: backend-build.tar.gz not found in $BACKEND_DIR! Deployment halted."
            exit 1
          fi
          
          echo "Ensuring backend .env file exists... (MUST be pre-configured by user on server)"
          if [ ! -f .env ]; then
            echo "CRITICAL WARNING: .env file not found in $BACKEND_DIR. Prisma migrate and backend start will likely fail!"
            # Do not exit here, let it try, but it will likely fail if .env is missing critical DB_URL
          else
            echo ".env file found in backend directory."
          fi

          echo "Running Prisma migrations..."
          npx prisma migrate deploy

          echo "Restarting backend service with PM2..."
          # Use ecosystem file for consistency if available and configured
          if [ -f "$APP_DIR/ecosystem.config.js" ]; then
            echo "Using PM2 ecosystem file to restart backend..."
            sudo pm2 reload $APP_DIR/ecosystem.config.js --env production --only backend || sudo pm2 start $APP_DIR/ecosystem.config.js --env production --only backend
          else
            echo "PM2 ecosystem file not found. Starting backend directly..."
            sudo pm2 restart backend || sudo pm2 start dist/main.js --name backend --time
          fi
          sudo pm2 save # Save current PM2 process list

          echo "Deploying Frontend..."
          cd $FRONTEND_DIR
          echo "Current frontend directory: $(pwd)"
          ls -la # List files to ensure tarball is present
          echo "Extracting frontend build..."
          if [ -f frontend-build.tar.gz ]; then
            tar -xzf frontend-build.tar.gz
            rm frontend-build.tar.gz # Clean up tarball
            echo "Frontend build extracted."
          else
            echo "ERROR: frontend-build.tar.gz not found in $FRONTEND_DIR! Deployment halted."
            exit 1
          fi
          
          echo "Ensuring frontend .env.production file exists... (MUST be pre-configured by user on server)"
          if [ ! -f .env.production ]; then
            echo "WARNING: .env.production file not found in $FRONTEND_DIR. Frontend might not have all necessary NEXT_PUBLIC variables or NEXTAUTH_SECRET!"
          else
            echo ".env.production file found in frontend directory."
          fi

          echo "Restarting frontend service with PM2..."
          if [ -f "$APP_DIR/ecosystem.config.js" ]; then
            echo "Using PM2 ecosystem file to restart frontend..."
            sudo pm2 reload $APP_DIR/ecosystem.config.js --env production --only frontend || sudo pm2 start $APP_DIR/ecosystem.config.js --env production --only frontend
          else
            echo "PM2 ecosystem file not found. Starting frontend directly..."
            # Assumes 'npm run start' is defined in frontend/package.json (e.g., next start -p 3000)
            sudo pm2 restart frontend || sudo pm2 start npm --name frontend -- run start --time
          fi
          sudo pm2 save

          echo "Reloading Nginx to apply any potential changes..."
          sudo systemctl reload nginx

          echo "Deployment seemingly successful! Performing health check..."
          # Health check (wait a few seconds for apps to be fully up)
          sleep 10 
          curl -s --head https://datizmo.com | grep '200 OK' && echo 'SUCCESS: datizmo.com is responding with 200 OK.' || echo 'ERROR: datizmo.com health check failed!'
