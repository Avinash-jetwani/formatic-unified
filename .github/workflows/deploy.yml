name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18' # Ensure this matches your EC2 environment
        cache: 'npm' # Cache npm dependencies

    - name: Build Backend
      working-directory: ./backend
      run: |
        npm ci
        npx prisma generate # Generate Prisma client before build
        npm run build
        # Verify build succeeded
        if [ ! -d "dist" ]; then
          echo "ERROR: Backend build failed - dist directory not found"
          exit 1
        fi
        # Remove dev dependencies node_modules before packaging
        rm -rf node_modules
        npm ci --omit=dev # Install only production dependencies
        # Create a tarball of the backend build and production node_modules
        # CRITICAL: Excluded .env from this tarball. It MUST be managed on the server.
        tar -czf backend-build.tar.gz dist prisma node_modules package.json package-lock.json
        # Verify tarball was created
        if [ ! -f "backend-build.tar.gz" ]; then
          echo "ERROR: Failed to create backend-build.tar.gz"
          exit 1
        fi
        echo "✅ Backend build completed successfully"
        ls -la backend-build.tar.gz

    - name: Build Frontend
      working-directory: ./frontend
      run: |
        npm ci
        npx prisma generate # Generate Prisma client before build
        npm run build
        # Verify build succeeded
        if [ ! -d ".next" ]; then
          echo "ERROR: Frontend build failed - .next directory not found"
          exit 1
        fi
        # Remove dev dependencies node_modules before packaging
        rm -rf node_modules
        npm ci --omit=dev # Install only production dependencies
        # Create a tarball of the frontend build and production node_modules
        # The .next directory contains the built static assets in .next/static
        # The public directory is at the root of the frontend workspace (if it exists)
        tar -czf frontend-build.tar.gz .next node_modules package.json package-lock.json next.config.js # Add other necessary files
        # Verify tarball was created
        if [ ! -f "frontend-build.tar.gz" ]; then
          echo "ERROR: Failed to create frontend-build.tar.gz"
          exit 1
        fi
        echo "✅ Frontend build completed successfully"
        ls -la frontend-build.tar.gz

    - name: Copy Backend Build to EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ec2-user # Updated username
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "backend/backend-build.tar.gz"
        target: "/home/ec2-user/formatic-unified/"
        strip_components: 1

    - name: Copy Frontend Build to EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ec2-user # Updated username
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "frontend/frontend-build.tar.gz"
        target: "/home/ec2-user/formatic-unified/"
        strip_components: 1

    - name: Verify Files Copied Successfully
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ec2-user
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          echo "=== Verifying build artifacts were copied ==="
          cd /home/ec2-user/formatic-unified
          echo "Files in target directory:"
          ls -la *.tar.gz 2>/dev/null || echo "No .tar.gz files found"
          
          if [ ! -f "backend-build.tar.gz" ]; then
            echo "❌ ERROR: backend-build.tar.gz missing"
            exit 1
          fi
          
          if [ ! -f "frontend-build.tar.gz" ]; then
            echo "❌ ERROR: frontend-build.tar.gz missing"
            exit 1
          fi
          
          echo "✅ Both build artifacts verified successfully"
        
    - name: Execute Deployment Commands on EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ec2-user # Updated username
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          set -e
          APP_DIR="/home/ec2-user/formatic-unified"
          BACKEND_DIR="$APP_DIR/backend"
          FRONTEND_DIR="$APP_DIR/frontend"
          NVM_DIR="/home/ec2-user/.nvm"

          echo "=== Starting deployment on server as $(whoami) ==="
          
          echo "=== Sourcing NVM for PM2 and Node commands ==="
          export NVM_DIR="$NVM_DIR"
          [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
          [ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

          echo "Node version: $(node -v)"
          echo "NPM version: $(npm -v)"
          
          # Check if PM2 is installed, install if not
          if ! command -v pm2 &> /dev/null; then
            echo "PM2 not found, installing globally..."
            npm install -g pm2
          fi
          echo "PM2 version: $(pm2 --version)"

          echo "=== Stopping existing services ==="
          pm2 stop all || echo "No PM2 processes running"

          echo "=== Checking for build artifacts in $APP_DIR ==="
          cd $APP_DIR
          ls -la *.tar.gz || echo "No .tar.gz files found in $APP_DIR"

          echo "=== Moving and extracting Backend Artifacts ==="
          if [ -f "$APP_DIR/backend-build.tar.gz" ]; then
            mv "$APP_DIR/backend-build.tar.gz" "$BACKEND_DIR/"
            cd $BACKEND_DIR
            echo "Current backend directory: $(pwd)"
            echo "Extracting backend build..."
            tar -xzf backend-build.tar.gz
            rm backend-build.tar.gz # Clean up tarball
            echo "Backend build extracted successfully."
          else
            echo "ERROR: backend-build.tar.gz not found in $APP_DIR! Deployment halted."
            exit 1
          fi
          
          echo "=== Moving and extracting Frontend Artifacts ==="
          if [ -f "$APP_DIR/frontend-build.tar.gz" ]; then
            mv "$APP_DIR/frontend-build.tar.gz" "$FRONTEND_DIR/"
            cd $FRONTEND_DIR
            echo "Current frontend directory: $(pwd)"
            echo "Extracting frontend build..."
            tar -xzf frontend-build.tar.gz
            rm frontend-build.tar.gz # Clean up tarball
            echo "Frontend build extracted successfully."
          else
            echo "ERROR: frontend-build.tar.gz not found in $APP_DIR! Deployment halted."
            exit 1
          fi

          echo "=== Updating base repository code ==="
          cd $APP_DIR
          echo "Current directory: $(pwd)"
          git fetch origin main # Fetch latest changes
          git reset --hard origin/main # Force update to latest, discarding local changes for non-artifact files

          echo "=== Ensuring backend .env file exists ==="
          cd $BACKEND_DIR # Change back to backend dir for .env check and migrations
          if [ ! -f .env ]; then
            echo "CRITICAL WARNING: .env file not found in $BACKEND_DIR. Prisma migrate and backend start will likely fail!"
            echo "Please ensure .env file is created on the server with proper database configuration."
            exit 1
          else
            echo ".env file found in backend directory."
          fi

          echo "=== Running Prisma migrations ==="
          npx prisma migrate deploy || { echo "Prisma migration failed"; exit 1; }

          echo "=== Regenerating Prisma client ==="
          npx prisma generate || { echo "Prisma generation failed"; exit 1; }

          echo "=== Ensuring frontend .env.production file exists ==="
          cd $FRONTEND_DIR # Change to frontend dir for .env check
          if [ ! -f .env.production ]; then
            echo "WARNING: .env.production file not found in $FRONTEND_DIR."
            echo "Creating basic .env.production file..."
            cat > .env.production << 'ENVEOF'
          NODE_ENV=production
          NEXT_PUBLIC_API_URL=http://localhost:3001
          NEXTAUTH_URL=https://datizmo.com
          NEXTAUTH_SECRET=your-secret-key-here
          ENVEOF
          else
            echo ".env.production file found in frontend directory."
          fi

          echo "=== Starting services with PM2 ==="
          cd $APP_DIR # PM2 ecosystem file is likely in APP_DIR
          if [ -f "ecosystem.config.js" ]; then
            echo "Using PM2 ecosystem file to manage services..."
            # Delete existing processes to ensure clean start
            pm2 delete all || echo "No existing processes to delete"
            # Start fresh with ecosystem file
            pm2 start ecosystem.config.js --env production
            echo "Waiting for services to stabilize..."
            sleep 10
          else
            echo "PM2 ecosystem file not found. Starting services directly..."
            # Delete existing processes
            pm2 delete all || echo "No existing processes to delete"
            # Start backend with correct path
            if [ -f "$BACKEND_DIR/dist/src/main.js" ]; then
              pm2 start $BACKEND_DIR/dist/src/main.js --name backend --cwd $BACKEND_DIR
            else
              pm2 start $BACKEND_DIR/dist/main.js --name backend --cwd $BACKEND_DIR
            fi
            # Start frontend  
            pm2 start npm --name frontend -- run start --cwd $FRONTEND_DIR
          fi
          
          echo "=== Saving PM2 process list ==="
          pm2 save

          echo "=== Checking PM2 status ==="
          pm2 status

          echo "=== Updating Nginx Configuration for Static Files ==="
          sudo tee /etc/nginx/conf.d/datizmo.conf << 'NGINXEOF'
          server {
              listen 80;
              server_name datizmo.com www.datizmo.com;
              return 301 https://$server_name$request_uri;
          }

          server {
              listen 443 ssl http2;
              server_name datizmo.com www.datizmo.com;
              
              # SSL configuration
              ssl_certificate /etc/ssl/certs/datizmo.com.crt;
              ssl_certificate_key /etc/ssl/private/datizmo.com.key;
              ssl_protocols TLSv1.2 TLSv1.3;
              ssl_ciphers HIGH:!aNULL:!MD5;
              ssl_prefer_server_ciphers on;
              
              # Security headers
              add_header X-Frame-Options "SAMEORIGIN" always;
              add_header X-XSS-Protection "1; mode=block" always;
              add_header X-Content-Type-Options "nosniff" always;
              
              # API routes - proxy to backend (keep /api/ in the path)
              location /api/ {
                  proxy_pass http://127.0.0.1:3001/api/;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_cache_bypass $http_upgrade;
              }
              
              # Next.js static files
              location /_next/static {
                  proxy_pass http://127.0.0.1:3000;
                  proxy_cache_valid 200 1y;
                  add_header Cache-Control "public, immutable";
                  expires 1y;
              }
              
              # Static assets
              location ~* \.(ico|css|js|gif|jpeg|jpg|png|svg|woff|woff2|ttf|eot)$ {
                  proxy_pass http://127.0.0.1:3000;
                  expires 1y;
                  add_header Cache-Control "public, immutable";
              }
              
              # All other routes - proxy to frontend
              location / {
                  proxy_pass http://127.0.0.1:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_cache_bypass $http_upgrade;
              }
          }
          NGINXEOF
          
          echo "=== Testing and Reloading Nginx ==="
          echo "Current config check:"
          sudo cat /etc/nginx/conf.d/datizmo.conf | grep -A 2 "proxy_pass"
          sudo nginx -t
          if [ $? -eq 0 ]; then
            echo "✅ Nginx config valid - reloading"
            sudo systemctl reload nginx
            sleep 2
            echo "✅ Nginx reloaded successfully"
          else
            echo "❌ Nginx config invalid"
            exit 1
          fi

          echo "=== Performing health checks ==="
          # Wait for services to be fully up
          sleep 15 
          
          # Check if backend is responding
          echo "Checking backend health..."
          curl -s http://localhost:3001/api/auth/session || echo "Backend health check failed"
          
          # Check if frontend is responding
          echo "Checking frontend health..."
          curl -s http://localhost:3000 || echo "Frontend health check failed"
          
          # Check main domain
          echo "Checking main domain..."
          curl -s --head https://datizmo.com | grep '200 OK' && echo 'SUCCESS: datizmo.com is responding with 200 OK.' || echo 'WARNING: datizmo.com health check failed - may need time to propagate'

          echo "=== Deployment completed! ==="
