name: Fix SSL with Certbot

on:
  workflow_dispatch:

jobs:
  setup-ssl:
    runs-on: ubuntu-latest
    
    steps:
    - name: Setup Let's Encrypt SSL Certificates
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ec2-user
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          set -e
          
          echo "=== Checking DNS resolution ==="
          nslookup datizmo.com
          nslookup www.datizmo.com
          
          echo "=== Installing/Updating Certbot ==="
          sudo yum update -y
          
          # Install EPEL if not already installed
          sudo yum install -y epel-release || echo "EPEL already installed"
          
          # Install certbot
          sudo yum install -y certbot python3-certbot-nginx || echo "Certbot already installed"
          
          echo "=== Stopping nginx temporarily ==="
          sudo systemctl stop nginx
          
          echo "=== Removing old certificates if they exist ==="
          sudo rm -rf /etc/letsencrypt/live/datizmo.com/ || echo "No old certificates to remove"
          sudo rm -rf /etc/letsencrypt/archive/datizmo.com/ || echo "No old archives to remove"
          sudo rm -rf /etc/letsencrypt/renewal/datizmo.com.conf || echo "No old renewal config to remove"
          
          echo "=== Generating Let's Encrypt certificates ==="
          sudo certbot certonly \
            --standalone \
            --non-interactive \
            --agree-tos \
            --email admin@datizmo.com \
            --domains datizmo.com,www.datizmo.com \
            --expand \
            --verbose
          
          echo "=== Verifying certificates were created ==="
          sudo ls -la /etc/letsencrypt/live/datizmo.com/
          
          echo "=== Creating nginx configuration with Let's Encrypt SSL ==="
          sudo tee /etc/nginx/conf.d/datizmo.conf << 'EOF'
          # Redirect HTTP to HTTPS
          server {
              listen 80;
              server_name datizmo.com www.datizmo.com;
              return 301 https://$server_name$request_uri;
          }
          
          # HTTPS configuration
          server {
              listen 443 ssl http2;
              server_name datizmo.com www.datizmo.com;
              
              # Let's Encrypt SSL certificates
              ssl_certificate /etc/letsencrypt/live/datizmo.com/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/datizmo.com/privkey.pem;
              
              # Modern SSL configuration
              ssl_protocols TLSv1.2 TLSv1.3;
              ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
              ssl_prefer_server_ciphers off;
              ssl_session_cache shared:SSL:10m;
              ssl_session_timeout 10m;
              
              # HSTS
              add_header Strict-Transport-Security "max-age=63072000" always;
              
              # Security headers
              add_header X-Frame-Options "SAMEORIGIN" always;
              add_header X-XSS-Protection "1; mode=block" always;
              add_header X-Content-Type-Options "nosniff" always;
              add_header Referrer-Policy "no-referrer-when-downgrade" always;
              
              # OCSP stapling
              ssl_stapling on;
              ssl_stapling_verify on;
              ssl_trusted_certificate /etc/letsencrypt/live/datizmo.com/chain.pem;
              
              # API routes - Backend
              location /api/ {
                  proxy_pass http://127.0.0.1:3001;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_cache_bypass $http_upgrade;
                  proxy_read_timeout 300;
                  proxy_connect_timeout 300;
                  proxy_send_timeout 300;
              }
              
              # Next.js static files
              location /_next/static {
                  proxy_pass http://127.0.0.1:3000;
                  proxy_cache_valid 200 1y;
                  add_header Cache-Control "public, immutable";
                  expires 1y;
              }
              
              # Static assets
              location ~* \.(ico|css|js|gif|jpeg|jpg|png|svg|woff|woff2|ttf|eot)$ {
                  proxy_pass http://127.0.0.1:3000;
                  expires 1y;
                  add_header Cache-Control "public, immutable";
              }
              
              # All other routes - Frontend
              location / {
                  proxy_pass http://127.0.0.1:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_cache_bypass $http_upgrade;
                  proxy_read_timeout 300;
                  proxy_connect_timeout 300;
                  proxy_send_timeout 300;
              }
          }
          EOF
          
          echo "=== Testing nginx configuration ==="
          sudo nginx -t
          
          if [ $? -eq 0 ]; then
            echo "=== Starting nginx ==="
            sudo systemctl start nginx
            sudo systemctl enable nginx
            
            echo "=== Setting up automatic certificate renewal ==="
            # Create renewal cron job
            echo "0 12 * * * /usr/bin/certbot renew --quiet --post-hook 'systemctl reload nginx'" | sudo crontab -
            
            echo "=== Checking services status ==="
            sudo systemctl status nginx --no-pager -l
            pm2 status
            
            echo "=== Testing HTTPS access ==="
            sleep 5
            curl -I https://datizmo.com
            curl -I https://www.datizmo.com
            
            echo "=== SSL setup completed successfully! ==="
            echo "🔒 Your site is now accessible with trusted SSL at:"
            echo "   https://datizmo.com"
            echo "   https://www.datizmo.com"
            
          else
            echo "❌ Nginx configuration error"
            sudo nginx -t
            exit 1
          fi 