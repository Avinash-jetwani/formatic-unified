name: Setup SSL with Let's Encrypt

on:
  workflow_dispatch:

jobs:
  setup-ssl:
    runs-on: ubuntu-latest
    
    steps:
    - name: Setup SSL Certificates on EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ec2-user
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          set -e
          
          echo "=== Installing Certbot for Let's Encrypt ==="
          # Install EPEL repository first (for Amazon Linux 2)
          sudo yum update -y
          sudo yum install -y epel-release
          
          # Install certbot and nginx plugin
          sudo yum install -y certbot python3-certbot-nginx
          
          echo "=== Stopping nginx temporarily for certificate generation ==="
          sudo systemctl stop nginx
          
          echo "=== Generating Let's Encrypt certificate ==="
          # Generate certificate for both datizmo.com and www.datizmo.com
          sudo certbot certonly --standalone \
            --email admin@datizmo.com \
            --agree-tos \
            --no-eff-email \
            -d datizmo.com \
            -d www.datizmo.com
          
          echo "=== Updating Nginx configuration with Let's Encrypt certificates ==="
          sudo tee /etc/nginx/conf.d/datizmo.conf << 'EOF'
          server {
              listen 80;
              server_name datizmo.com www.datizmo.com;
              return 301 https://$server_name$request_uri;
          }
          
          server {
              listen 443 ssl;
              server_name datizmo.com www.datizmo.com;
              
              # Let's Encrypt SSL configuration
              ssl_certificate /etc/letsencrypt/live/datizmo.com/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/datizmo.com/privkey.pem;
              
              # Modern SSL configuration
              ssl_protocols TLSv1.2 TLSv1.3;
              ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
              ssl_prefer_server_ciphers off;
              
              # HSTS (HTTP Strict Transport Security)
              add_header Strict-Transport-Security "max-age=63072000" always;
              
              # Security headers
              add_header X-Frame-Options "SAMEORIGIN" always;
              add_header X-XSS-Protection "1; mode=block" always;
              add_header X-Content-Type-Options "nosniff" always;
              add_header Referrer-Policy "no-referrer-when-downgrade" always;
              
              # API routes
              location /api/ {
                  proxy_pass http://127.0.0.1:3001/api/;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_cache_bypass $http_upgrade;
              }
              
              # Next.js static files
              location /_next/static {
                  proxy_pass http://127.0.0.1:3000;
                  proxy_cache_valid 200 1y;
                  add_header Cache-Control "public, immutable";
                  expires 1y;
              }
              
              # Static assets
              location ~* \.(ico|css|js|gif|jpeg|jpg|png|svg|woff|woff2|ttf|eot)$ {
                  proxy_pass http://127.0.0.1:3000;
                  expires 1y;
                  add_header Cache-Control "public, immutable";
              }
              
              # All other routes
              location / {
                  proxy_pass http://127.0.0.1:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_cache_bypass $http_upgrade;
              }
          }
          EOF
          
          echo "=== Testing nginx configuration ==="
          sudo nginx -t
          
          echo "=== Starting nginx ==="
          sudo systemctl start nginx
          sudo systemctl enable nginx
          
          echo "=== Setting up automatic certificate renewal ==="
          # Add cron job for automatic renewal
          echo "0 12 * * * /usr/bin/certbot renew --quiet --post-hook 'systemctl reload nginx'" | sudo crontab -
          
          echo "=== Testing HTTPS with real certificate ==="
          sleep 5
          curl -I https://datizmo.com
          
          echo "=== SSL setup completed! ==="
          echo "Your site should now be accessible at https://datizmo.com with a trusted certificate" 