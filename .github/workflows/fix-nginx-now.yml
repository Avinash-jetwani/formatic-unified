name: Fix Nginx Now

on:
  workflow_dispatch:

jobs:
  fix-nginx:
    runs-on: ubuntu-latest
    
    steps:
    - name: Fix Nginx Configuration Immediately
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ec2-user
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          echo "=== Immediate Nginx Fix ==="
          
          echo "=== Current Nginx config check ==="
          sudo cat /etc/nginx/conf.d/datizmo.conf | grep -A 5 "location /api/"
          
          echo "=== Backing up current config ==="
          sudo cp /etc/nginx/conf.d/datizmo.conf /etc/nginx/conf.d/datizmo.conf.backup
          
          echo "=== Checking for conflicting nginx configs ==="
          echo "Files in /etc/nginx/conf.d/:"
          sudo ls -la /etc/nginx/conf.d/
          
          echo "=== Removing ALL nginx configs to start fresh ==="
          sudo rm -f /etc/nginx/conf.d/*.conf
          sudo rm -f /etc/nginx/sites-enabled/default 2>/dev/null || true
          sudo rm -f /etc/nginx/sites-available/default 2>/dev/null || true
          
          echo "=== Creating fixed Nginx configuration ==="
          sudo tee /etc/nginx/conf.d/datizmo.conf << 'EOF'
          server {
              listen 80;
              server_name datizmo.com www.datizmo.com;
              
              # Security headers
              add_header X-Frame-Options "SAMEORIGIN" always;
              add_header X-XSS-Protection "1; mode=block" always;
              add_header X-Content-Type-Options "nosniff" always;
              
              # API routes - proxy to backend (keep /api/ in the path)
              location /api/ {
                  proxy_pass http://127.0.0.1:3001/api/;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
                  proxy_cache_bypass \$http_upgrade;
              }
              
              # Next.js static files
              location /_next/static {
                  proxy_pass http://127.0.0.1:3000;
                  proxy_cache_valid 200 1y;
                  add_header Cache-Control "public, immutable";
                  expires 1y;
              }
              
              # Static assets
              location ~* \.(ico|css|js|gif|jpeg|jpg|png|svg|woff|woff2|ttf|eot)\$ {
                  proxy_pass http://127.0.0.1:3000;
                  expires 1y;
                  add_header Cache-Control "public, immutable";
              }
              
              # All other routes - proxy to frontend
              location / {
                  proxy_pass http://127.0.0.1:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
                  proxy_cache_bypass \$http_upgrade;
              }
          }
          EOF
          
          echo "=== Testing new configuration ==="
          sudo nginx -t
          
          if [ $? -eq 0 ]; then
            echo "✅ Configuration valid - reloading Nginx"
            sudo systemctl reload nginx
            echo "✅ Nginx reloaded successfully"
          else
            echo "❌ Configuration invalid - restoring backup"
            sudo cp /etc/nginx/conf.d/datizmo.conf.backup /etc/nginx/conf.d/datizmo.conf
            exit 1
          fi
          
          echo "=== Verifying the fix ==="
          sleep 3
          
          echo "Testing API endpoint directly on server:"
          curl -s http://localhost:3001/api/auth/session || echo "Backend not responding"
          
          echo "Testing through Nginx proxy:"
          curl -s -w "HTTP Status: %{http_code}\\n" http://localhost/api/auth/session || echo "Proxy test failed"
          
          echo "=== Fix completed! API should now work ===" 